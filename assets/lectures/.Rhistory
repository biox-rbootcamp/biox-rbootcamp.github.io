essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", "1:10"))
head(essay17)
essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10))
essay17
paste0(LETTERS)
paste0(LETTERS, collapse = "")
rep(paste0(LETTERS, collapse = ""), 10)
essay17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10))
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10))
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
paste("#", essays17[1, 1]), essays17[1, 2]
head(essays17)
paste("#", essays17[1, 1]), essays17[1, 2])
paste("#", essays17[1, 1], essays17[1, 2])
c(paste("#", essays17[i, 1]), essays17[i, 2])
i <- 5
c(paste("#", essays17[i, 1]), essays17[i, 2])
essays17[i, 2]
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
essays17[1, 2]
c(paste("#", essays17[i, 1]), essays17[i, 2])
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", "", essays17[i, 1])
fileName <- paste0("~/Desktop/TX/", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", "-", essays17[i, 1])
fileName <- paste0("C:/Users/AJ Alvero/Desktop/text17", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
essays17 <- data.frame(ID = paste(sample(1:20, 10), "  ", 1:10),
text = rep(paste0(LETTERS, collapse = ""), 10),
stringsAsFactors = FALSE)
sapply(1:nrow(essays17), function(i) {
essayID <- gsub(" ", ".", essays17[i, 1])
fileName <- paste0("C:/Users/AJ Alvero/Desktop/text17", essayID, ".txt")
writeLines(c(paste("#", essays17[i, 1]), essays17[i, 2]),
con = fileName)
})
CRAN_page <- function(...) {
file.path('https://cran.rstudio.com/src/contrib', ...)
}
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
## we love data.table
library(data.table)
setDT(pkgs)
## drop directories
pkgs <- pkgs[Size != '-']
## drop files that does not seem to be R packages
pkgs <- pkgs[grep('tar.gz$', Name)]
## package name should contain only (ASCII) letters, numbers and dot
pkgs[, name := sub('^([a-zA-Z0-9\\.]*).*', '\\1', Name)]
## grab date from last modified timestamp
pkgs[, date := as.POSIXct(`Last modified`, format = '%d-%b-%Y %H:%M')]
pkgs[, date := as.character(date)]
## keep date and name
pkgs <- pkgs[, .(name, date)]
## list of packages with at least one archived version
archives <- readHTMLTable(readLines(CRAN_page('Archive')),
which = 1, stringsAsFactors = FALSE)
?CRAN_page()
CRAN_page()
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
readLines(CRAN_page())
?readHTMLTable
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(CRAN_page(),
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable("https://cran.rstudio.com/src/contrib/",
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(doc = "https://cran.rstudio.com/src/contrib/",
which = 1, stringsAsFactors = FALSE)
## CRAN mirror to use
CRAN_page <- function(...) {
file.path('https://cran.rstudio.com/src/contrib', ...)
}
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
which = 1, stringsAsFactors = FALSE)
## get list of currently available packages on CRAN
library(XML)
pkgs <- readHTMLTable(readLines(CRAN_page()),
skip.rows =100,
which = 1, stringsAsFactors = FALSE)
pkgs <- readHTMLTable(readLines(CRAN_page()),
skip.rows =200,
which = 1, stringsAsFactors = FALSE)
head(readLines(CRAN_page()))
23 + sin(pi/2)
abs(-10) + (17-3)^4
4 * exp(10) + sqrt(2)
# Element-wise multiplication
v1 * c(1,2)
# Element-wise multiplication
v1 <- c(1,2,3,4,5,6,7,8,9,10)
# Element-wise multiplication
v1 * c(1,2)
> 4*3*2
4*3*2
# using column names.
employees$name
# Create the data frame.
employees <- data.frame(
row.names = c("E1", "E2", "E3","E4", "E5"),
name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE )
# Print the data frame.
employees
# using column names.
employees$name
employees[, c("name", "salary")]
# using integer indexing
employees[, 1]
employees[, c(1, 2)]
letters
matrix(0:30, nrow = 5, byrow = FALSE)
matrix(1:30, nrow = 5, byrow = FALSE)
exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5),
late = sampel(c(T, F), 5)
)
exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
matrix(1:30, nrow = 5, byrow = FALSE)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
sample(5:500, 10)
Z
Z <- sample(letters, 1000)
Z <- sample(letters, 1000)
Z <- sample(letters, 1000, replace = T)
Z
head(Z)
Z <- sample(letters, 1000, replace = T)
head(Z)
table(Z)
table(Z)[table(Z) %% 2 == 0]
matrix(1:30, nrow = 5, byrow = FALSE)
Y <- X + matrix(rnorm(30), nrow = 5)
X <- matrix(1:30, nrow = 5, byrow = FALSE)
X
Y <- X + matrix(rnorm(30), nrow = 5)
Y
invY <- Y^(-1)
X <- matrix(1:25, nrow = 5, byrow = FALSE)
X
Y <- X + matrix(rnorm(30), nrow = 5)
X <- matrix(1:36, nrow = 5, byrow = FALSE)
X
X <- matrix(1:36, nrow = 6, byrow = FALSE)
X
Y <- X + matrix(rnorm(36), nrow = 6)
Y
invY <- solve(Y)
invY %*% Y
round(res, digits = 0.001)
res <- invY %*% Y
res
round(res, digits = 3)
round(res, digits = 5)
round(res, digits = 6)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
(exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
))
mean(exams$score)
set.seed(123)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
set.seed(123)
(exams <- data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
))
set.seed(123)
data.frame(
student = c("Alice", "Sarah", "Harry", "Ron", "Kate"),
score = sample(80:100, 5),
letter = sample(c("A","B"), 5, replace = TRUE),
late = sample(c(T, F), 5, replace = TRUE)
)
exams[which.max(exams$score), ]
rm(list = ls())
library(tidyverse)
summary(cars)
plot(pressure)
library(tidyverse)
summary(cars)
?readr_example
readr::readr_example
?readr::readr_example
mtcars <- read_csv(readr_example("mtcars.csv"))
library(tidyverse)
library(tidyverse)
mtcars <- read_csv(readr_example("mtcars.csv"))
options(width = 80)
knitr::opts_chunk$set(
warning = FALSE, message = FALSE,
cache = FALSE, tidy = FALSE, size = "small")
library(dplyr)
mtcars <- read_csv(readr_example("mtcars.csv"))
mtcars <- read_csv("mtcars.csv")
?read_fwf.
?read_fwf
challenge <- read_csv(readr_example("challenge.csv"))
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()) )
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()) )
challenge2
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
type_convert(challenge2)
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
theme_set(theme_bw())
theme_update(text = element_text(size = 20))
sqrt(mean((mtcars_test$mpg - mtcars_test$pred)^2)
rm(list = ls())
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
library(rpart)
library(rpart.plot)
data(ptitanic)
tree <- rpart(survived ~ ., data = ptitanic, cp = .02)
cols <- c("darkred", "green4")[tree$frame$yval]         #green if survived
prp(tree, extra = 106, under = TRUE, branch = .5,  tweak = 1.4,
faclen = 0, ge=" > ", eq=" ", split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=FALSE, Margin = 0)
library(rpart)
library(rpart.plot)
tree
library(rpart)
library(rpart.plot)
data(ptitanic)
tree <- rpart(survived ~ ., data = ptitanic, cp = .02)
cols <- c("darkred", "green4")[tree$frame$yval]         #green if survived
prp(tree, extra = 106, under = TRUE, branch = .5,  tweak = 1.4,
faclen = 0, ge=" > ", eq=" ", split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=FALSE, Margin = 0)
install.packages("rpart.plot")
install.packages("rpart.plot")
?data(ptitanic)
?ptitanic
rm(list = ls())
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
data(ptitanic)
library(rpart)
data(ptitanic)
library(rpart.plot)
data(ptitanic)
data(rpart.plot::ptitanic)
library(rpart.plot)
data(ptitanic)
head(ptitanic)
?ptitanic
rm(list = ls())
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
library(rpart.plot)
head(ptitanic)
library(rpart.plot)
data(ptitanic)
head(ptitanic)
head(titanic)
library(rpart.plot)
data(ptitanic)
head(titanic)
head(ptitanic)
ptitanic[1:10, ]
rm(list = ls())
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
rm(list = ls())
knitr::opts_chunk$set(cache=TRUE)
library(tidyverse)
library(rpart.plot)
data(ptitanic)
ptitanic[1:6, ]
class(ptitanic)
ptitanic
ptitanic[1:6, ]
ptitanic[1:6, 1]
ptitanic[1:6, 1:5]
colnames(ptitanic)
mpg
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = strsplit(trans, "(")[[1]][1]
transmission = factor(transmission, levels = c("auto", "maptitanicnual"))
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = strsplit(trans, "(")[[1]][1],
transmission = factor(transmission, levels = c("auto", "maptitanicnual"))
)
?strsplit
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = strsplit(trans, "(")[[1]][1],
transmission = factor(transmission, levels = c("auto", "manual"))
)
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = strsplit(trans, "(")[[1]][1],
#transmission = factor(transmission, levels = c("auto", "manual"))
)
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = strsplit(trans, "\\(")[[1]][1],
#transmission = factor(transmission, levels = c("auto", "manual"))
)
mpg
# We first format the column trans to contain only info on transmission auto/manual
mpg
mpg <- mpg %>%
mutate(
trans = strsplit(trans, "\\(")[[1]][1],
trans = factor(trans, levels = c("auto", "manual"))
)
mpg
rm(mpg)
# We first format the column trans to contain only info on transmission auto/manual
mpg
mpg <- mpg %>%
mutate(
trans = strsplit(trans, "\\(")[[1]][1],
trans = factor(trans, levels = c("auto", "manual"))
)
mpg
mpg
mtcars$mpg
tt <- t.test(x = mtcars$mpg, mu = 25, alternative = "two.sided")
tt
tt <- t.test(x = mtcars$mpg, mu = 25, alternative = "greater")
tt
library(tidyverse)
library(nycflights13)
mean(flights$arr_delay, na.rm = T)
( tt = t.test(x=flights$arr_delay, mu=0, alternative="two.sided" ) )
( tt = t.test(x=flights$arr_delay, mu=0, alternative="less" ) )
( tt = t.test(x=flights$arr_delay, mu=10, alternative="less" ) )
( tt = t.test(x=flights$arr_delay, mu=5, alternative="less" ) )
flights %>%
mutate(season = cut(month, breaks = c(0,3,6,9,12))) %>%
ggplot(aes(x = season, y = arr_delay)) + geom_boxplot (alpha=0.1) +
xlab("Season" ) + ylab("Arrival delay" )
flights %>%
filter(arr_delay < 120) %>%
mutate(season = cut(month, breaks = c(0,3,6,9,12))) %>%
ggplot(aes(x = season, y = arr_delay)) + geom_boxplot (alpha=0.01) +
xlab("Season" ) + ylab("Arrival delay" )
flights.winter = filter(flights, month %in% c(1,2,3))
flights.summer = filter(flights, month %in% c(7,8,9))
t.test(x=flights.winter$arr_delay, y=flights.summer$arr_delay)
library(tidyverse)
# We first format the column trans to contain only info on transmission auto/manual
mpg
mpg <- mpg %>%
mutate(
transmission = factor(
gsub("\\((.*)", "", trans), levels = c("auto", "manual"))
)
mpg
mpg2008 <- mpg %>%
filter(year == 2008)
t.test(mpg2008$hwy, mu = 30, alternative = "two.sided")
mpg2008_4cyl <- mpg %>%
filter(year == 2008, cyl == 4)
t.test(mpg2008_4cyl$hwy, mu = 30, alternative = "two.sided")
t.test(data = mpg2008, hwy ~ transmission, alternative = "less")
library(tidyverse)
# We create a new culumn with manual/automatic data only
mpg <- mpg %>%
mutate(
transmission = factor(
gsub("\\((.*)", "", trans), levels = c("auto", "manual"))
)
mpg
# install.packages("ISLR")
library(ISLR)
(Default <- tbl_df(Default))  # convert data.frame to tibble
# Skip first 2 lines since they were comments
url <- paste0("https://raw.githubusercontent.com/jadeyee/r2d3-part-1-data/",
"master/part_1_data.csv")
houses <- read_csv(url, skip = 2)
houses <- tbl_df(houses)
houses <- houses %>%
mutate(city = factor(in_sf, levels = c(1, 0), labels = c("SF", "NYC")))
houses
