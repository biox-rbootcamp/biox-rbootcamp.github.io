install.packages("WVPlots")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(WVPlots)
fire <- read_csv(file = "~/Downloads/CivilInjury_0.csv")
fire <- fire %>%
mutate(mo = as.POSIXlt(`Injury Date`)$mon + 1) %>%
rename(dt = `Injury Date`,
injuries = `Total Injuries`)
str(fire)
install.packages("MLmetrics")
library(MLmetrics)
help(RMSE)
library(MLmetrics)
data = data.frame("Control_0"= rnorm(50, 175, 25),
"Treatment_0"= rnorm(50, 175, 25))
data$Control_1 = data$Control_0 + rnorm(50, 0, 5)
data$Treatment_1 = data$Treatment_0 + rnorm(50, -10, 5)
ordered_differences <- sort(mean_differences) # sort
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold.", type)]])) return(res)
paste0(
"<details><summary>", type, "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
library(ggplot2)
# set paramaters of simulation
sims_to_run <- 10000
sample_n   <- 20
dist_mean  <- 75
dist_sd    <- 5
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences between two samples (n=20) \n
both drawn from the same normal distribution (u=75, sd=5")+
xlab("mean difference")
min(mean_differences)
max(mean_differences)
mean(abs(mean_differences)>1)
mean(abs(mean_differences)>6)
library(ggplot2)
# set paramaters of simulation
sims_to_run <- 1000
sample_n   <- 20
dist_mean  <- 75
dist_sd    <- 5
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences between two samples (n=20) \n
both drawn from the same normal distribution (u=75, sd=5")+
xlab("mean difference")
min(mean_differences)
max(mean_differences)
knitr::include_graphics('./crump1_demo.png')
# set paramaters of simulation
sims_to_run <- 100
sample_n   <- 40
dist_mean  <- .49
dist_sd    <- .168
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences in proportion remembered")+
xlab("mean difference")
min(mean_differences)
max(mean_differences)
ordered_differences <- sort(mean_differences) # sort
alpha_cutoff <- ordered_differences[950] # pick 950th number
alpha_cutoff
# add to histogram using vline
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
geom_vline(xintercept=alpha_cutoff)+
theme_classic()+
ggtitle("Histogram of mean differences")+
xlab("absolute mean difference")
ordered_differences[950]
sort(mean_differences)
# set paramaters of simulation
sims_to_run <- 1000
sample_n   <- 40
dist_mean  <- .49
dist_sd    <- .168
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences in proportion remembered")+
xlab("mean difference")
min(mean_differences)
max(mean_differences)
ordered_differences <- sort(mean_differences) # sort
alpha_cutoff <- ordered_differences[950] # pick 950th number
alpha_cutoff
# add to histogram using vline
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
geom_vline(xintercept=alpha_cutoff)+
theme_classic()+
ggtitle("Histogram of mean differences")+
xlab("absolute mean difference")
t.test(mpg2008$hwy, mu = 30, alternative = "two.sided")
library(tidyverse)
# We first format the column trans to contain only info on transmission auto/manual
mpg
mpg <- mpg %>%
mutate(
transmission = factor(
gsub("\\((.*)", "", trans), levels = c("auto", "manual"))
)
mpg
mpg2008 <- mpg %>%
filter(year == 2008)
t.test(mpg2008$hwy, mu = 30, alternative = "two.sided")
dim(mpg2008$hwy)
length(mpg2008$hwy)
mpg2008_4cyl <- mpg %>%
filter(year == 2008, cyl == 4)
t.test(mpg2008_4cyl$hwy, mu = 30, alternative = "two.sided")
ggplot(mpg2008, aes(x = transmission, y = hwy)) +
geom_boxplot() + geom_jitter(height = 0, width = 0.2)
help("t.test")
t.test(data$Treatment_1 - data$Treatment_0,
0,
alternative="two.sided")
data = data.frame("Control_0"= rnorm(150, 175, 25),
"Treatment_0"= rnorm(150, 175, 25))
data$Control_1 = data$Control_0 + rnorm(150, 0, 5)
data$Treatment_1 = data$Treatment_0 + rnorm(150, -7, 5)
t.test(data$Treatment_1 - data$Treatment_0,
0,
alternative="two.sided")
data = data.frame("Control_0"= rnorm(150, 175, 25),
"Treatment_0"= rnorm(150, 175, 25))
data$Control_1 = data$Control_0 + rnorm(150, 0, 5)
data$Treatment_1 = data$Treatment_0 + rnorm(150, -7, 5)
print(t.test(data$Treatment_1 - data$Treatment_0,
mu = 0,
alternative="two.sided"))
print(t.test(data$Control_1 - data$Control_0,
data$Treatment_1 - data$Treatment_0,
alternative="two.sided"))
pbinom(p = 0.5, n=15, q=0.95 )
pbinom(0.975, p = 0.5, n=15 )
pbinom(0.975, p = 0.5, 15 )
hep(qbinom)
help(qbinom)
qbinom(0.975, 15, p = 0.5, n=15)
qbinom(0.975, 15, p = 0.5)
qbinom(97.5, 15, p = 0.5)
qbinom(0.75, 15, p = 0.5)
qbinom(0.75, 15, 0.5)
qbinom(0.975, 15, 0.5)
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -7, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 > 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -6, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 > 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -6, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 > 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -5, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 > 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -5, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data$Treatment_1 - data$Treatment_0,
mu = 0,
alternative="two.sided"))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -5, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data$Treatment_1 - data$Treatment_0,
mu = 0,
alternative="two.sided"))
data$Treatment_1
print(t.test(data1$Treatment_1 - data1$Treatment_0,
mu = 0,
alternative="two.sided"))
data1 = data.frame("Control_0"= rnorm(10, 175, 25),
"Treatment_0"= rnorm(10, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(10, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(10, -5, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 10, 0.5), ", ", qbinom(0.975, 10, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(10, 175, 25),
"Treatment_0"= rnorm(10, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(10, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(10, -5, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 10, 0.5), ", ", qbinom(0.975, 10, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(10, 175, 25),
"Treatment_0"= rnorm(10, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(10, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(10, -7, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 10, 0.5), ", ", qbinom(0.975, 10, 0.5), "]"))
print(paste0("My stat:", T_Treat))
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -7, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data1$Treatment_1 - data1$Treatment_0,
mu = 0,
alternative="two.sided"))
data1$Treatment_1 - data1$Treatment_0
data1 = data.frame("Control_0"= rnorm(15, 175, 25),
"Treatment_0"= rnorm(15, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(15, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(15, -3, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 15, 0.5), ", ", qbinom(0.975, 15, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data1$Treatment_1 - data1$Treatment_0,
mu = 0,
alternative="two.sided"))
data1 = data.frame("Control_0"= rnorm(10, 175, 25),
"Treatment_0"= rnorm(10, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(10, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(10, -3, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 10, 0.5), ", ", qbinom(0.975, 10, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data1$Treatment_1 - data1$Treatment_0,
mu = 0,
alternative="two.sided"))
data1 = data.frame("Control_0"= rnorm(12, 175, 25),
"Treatment_0"= rnorm(12, 175, 25))
data1$Control_1 = data1$Control_0 + rnorm(12, 0, 5)
data1$Treatment_1 = data1$Treatment_0 + rnorm(12, -3, 5)
T_Treat = sum(data1$Treatment_1 - data1$Treatment_0 < 0)
## rejection region under the null
print(paste0("Rejection region: [", qbinom(0.025, 12, 0.5), ", ", qbinom(0.975, 12, 0.5), "]"))
print(paste0("My stat:", T_Treat))
print(t.test(data1$Treatment_1 - data1$Treatment_0,
mu = 0,
alternative="two.sided"))
help("t.test")
t.test(x=x, y=y,alternative="two.sided", var.equal = TRUE)
x = c(70, 82, 78, 74, 94, 82)
n = length(x)
y = c(64, 72, 60, 76, 72, 80, 84, 68)
m = length(y)
t.test(x=x, y=y,alternative="two.sided", var.equal = TRUE)
t.test(x=x, y=y,alternative="greater", var.equal = TRUE)
t.test(x=x, y=y,alternative="greater", var.equal = TRUE)
data = read.csv2("/Users/cdonnat/Dropbox/COVID-19/california-coronavirus-data/cdph-skilled-nursing-facilities.csv")
View(data)
knitr::opts_chunk$set(echo = TRUE)
data = read.csv2("/Users/cdonnat/Dropbox/COVID-19/california-coronavirus-data/cdph-skilled-nursing-facilities.csv",
sep=",")
county_data = data %>%
group_by(county, date) %>%
summarise_if(is.numeric, sum)
ggplot(county_data, aes(x=data, y = patients_active_cases, colour=county))+
geom_point() + theme_bw()
names(county_data)
county_data = data %>%
group_by(county, date) %>%
summarise_if(is.numeric, sum)
ggplot(county_data, aes(x=date, y = patients_active_cases, colour=county))+
geom_point() + theme_bw()
county_data = data %>%
group_by(county, date) %>%
summarise_if(is.numeric, sum)
ggplot(county_data, aes(x=date, y = patients_active_cases, colour=county))+
geom_point() + theme_bw()
unique(data$county)
ind = which.max(data$patients_active_cases)
ind
names(data)
nursing_home1 = data[which.max(data$patients_active_cases),"id"]
nursing_home1 = data[which.max(data$patients_active_cases),"id"]
ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases, colour=county))+
geom_point() + theme_bw())
data %>% filter(id == nursing_home1)
data %>% filter(id == nursing_home1)ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases))+
geom_point() + theme_bw()
ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases))+
geom_point() + theme_bw()
ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases))+
geom_point() + theme_bw() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases))+
geom_point() + theme_bw() +
geom_point(aes(x=date, y = patients_deaths), colour="Cum. Deaths")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data %>% filter(id == nursing_home1),aes(x=date, y = patients_active_cases))+
geom_point() + theme_bw() +
geom_point(aes(x=date, y = patients_deaths, colour="Cum. Deaths"))+
theme(axis.text.x = element_text(angle = 90))
nursing_home_samples = sample(unique(data$id), 10, replace = FALSE)
ggplot(data %>% filter(id %in% nursing_home_samples),
aes(x=date, y = patients_active_cases, colour = id))+
geom_point() + theme_bw() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data %>% filter(id %in% nursing_home_samples),
aes(x=date, y = patients_active_cases, colour = id))+
geom_point() + theme_bw() +
theme(axis.text.x = element_text(angle = 90))
length(unique(data$id))
data %>%
group_by(id) %>%
summarise_if(is.numeric, sum)
data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases)
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases))
library(reshape2)
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
county_data = data %>%
group_by(county, date) %>%
summarise_if(is.numeric, sum)
ggplot(county_data, aes(x=date, y = patients_active_cases, colour=county))+
geom_point() + theme_bw()
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases))%>%
ggplot()+
geom_boxplot(aes(fill=variable))
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases))%>%
ggplot()+
geom_boxplot(aes(x=variable))
test = melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases))
View(test)
test = melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(patients_active_cases, staff_active_cases), id.vars = c("id"))
test = melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases), id.vars = c("id"))
View(test)
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases), id.vars = c("id"))%>%
ggplot()+
geom_boxplot(aes(x=variable))
test$variable
test$value
test$variable == "patients_active_cases"
test[test$variable == "patients_active_cases",]
test[test$variable == "patients_active_cases", "value"]
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases), id.vars = c("id"))%>%
ggplot()+
geom_boxplot(aes(y=value))
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases), id.vars = c("id"))%>%
ggplot()+
geom_boxplot(aes(y=value, fill = variable))
melt(data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases), id.vars = c("id"))%>%
ggplot()+
geom_boxplot(aes(y=value, fill = variable)) +
scale_y_continuous(trans='log10')
test_data = data %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases)
print(c(mean(test_data$patients_active_cases == 0), mean(test_data$staff_active_cases == 0)))
test_data$patients_active_cases == 0
mean(test_data$patients_active_cases == 0)
which(is.na(test_data$patients_active_cases == 0))
test_data[1225,]
test_data = data %>%
filter(id != "None") %>%
group_by(id) %>%
summarise_if(is.numeric, sum) %>%
select(id, patients_active_cases, staff_active_cases)
mean(test_data$patients_active_cases == 0)
print(c(mean(test_data$patients_active_cases == 0), mean(test_data$staff_active_cases == 0)))
sample(which(test_data$patients_active_cases>0),1)
index= test_data$id[sample(which(test_data$patients_active_cases>0),1)]
index
index= toString(test_data$id[sample(which(test_data$patients_active_cases>0),1)])
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=patients_active_cases))
index= toString(test_data$id[sample(which(test_data$patients_active_cases>0),1)])
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=patients_active_cases))
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=patients_active_cases))
index= toString(test_data$id[sample(which(test_data$patients_active_cases>0),1)])
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=patients_active_cases))
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=patients_active_cases))+
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data %>% filter(id == index)) +
geom_point(aes(x=date, y=staff_active_cases))+
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
