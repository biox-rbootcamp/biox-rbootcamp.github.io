library(ggplot2)
# set paramaters of simulation
sims_to_run <- 100
sample_n   <- 20
dist_mean  <- 75
dist_sd    <- 5
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences between two samples (n=20) \n
both drawn from the same normal distribution (u=75, sd=5")+
xlab("mean difference")
freq = mean(abs(mean_differences)>1)
freq
mean(abs(mean_differences)>6)
0.02 * 75
library(ggplot2)
# set paramaters of simulation
sims_to_run <- 1000
sample_n   <- 20
dist_mean  <- 75
dist_sd    <- 5
# run simulation
mean_differences <- length(sims_to_run)
for(i in 1:sims_to_run){
mean_control_A      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_control_B      <- mean(rnorm(sample_n, dist_mean, dist_sd))
mean_differences[i] <- mean_control_A - mean_control_B
}
# plot the  distribution of mean difference scores
plot_df <- data.frame(sim=1:sims_to_run,mean_differences)
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
theme_classic()+
ggtitle("Histogram of mean differences between two samples (n=20) \n
both drawn from the same normal distribution (u=75, sd=5")+
xlab("mean difference")
min(mean_differences)
max(mean_differences)
ordered_differences <- sort(mean_differences) # sort
alpha_cutoff <- ordered_differences[950] # pick 950th number
alpha_cutoff
# add to histogram using vline
ggplot(plot_df,aes(x=mean_differences))+
geom_histogram(bins=20, color="white")+
geom_vline(xintercept=alpha_cutoff)+
theme_classic()+
ggtitle("Histogram of mean differences")+
xlab("absolute mean difference")
help(dnorm)
pkgs_needed <- c("tidyverse", "Biostrings",
"parathyroidSE", "EnsDb.Hsapiens.v86", "nutshell")
letsinstall = setdiff(pkgs_needed, installed.packages())
if (length(letsinstall) > 0) {
BiocManager::install(letsinstall)
}
library("dplyr")
library("ggplot2")
library("Biostrings")
library("parathyroidSE")
library("EnsDb.Hsapiens.v86")
data("parathyroidGenesSE", package = "parathyroidSE")
metadata(parathyroidGenesSE)$MIAME
abstract(metadata(parathyroidGenesSE)$MIAME)
genes <- read.csv(textConnection(
"name, group
ESR1,  estrogen
ESR2,  estrogen
CASR,  parathyroid
VDR,   parathyroid
JUN,   parathyroid
CALR,  parathyroid
ORAI2, parathyroid"),
stringsAsFactors = FALSE, strip.white = TRUE)
ens <- ensembldb::select(EnsDb.Hsapiens.v86,
keys = list(GenenameFilter(genes$name),
TxBiotypeFilter("protein_coding")),
columns = c("GENEID", "GENENAME"))
ens <-
dplyr::filter(ens, GENEID %in% rownames(parathyroidGenesSE)) %>%
mutate(group = genes$group[match(GENENAME, genes$name)])
ens
genes
ens <- ensembldb::select(EnsDb.Hsapiens.v86,
keys = list(GenenameFilter(genes$name),
TxBiotypeFilter("protein_coding")),
columns = c("GENEID", "GENENAME"))
ens <- ensembldb::select(EnsDb.Hsapiens.v86,
keys = list(GenenameFilter(genes$name),
TxBiotypeFilter("protein_coding")),
columns = c("GENEID", "GENENAME"))
ens
ens <-
dplyr::filter(ens, GENEID %in% rownames(parathyroidGenesSE)) %>%
mutate(group = genes$group[match(GENENAME, genes$name)])
ens
countData <- assay( parathyroidGenesSE )
parathyroidGenesSE
countData <- assay( parathyroidGenesSE )
gene.counts <- t(countData[ens$GENEID, ])
colnames(gene.counts) <- ens$GENENAME
gene.counts
countData <- assay( parathyroidGenesSE )
dim(countData)
View(countData)
gene.counts <- t(countData[ens$GENEID, ])
View(gene.counts)
colnames(gene.counts) <- ens$GENENAME
dat <- cbind(data.frame(colData( parathyroidGenesSE)), data.frame(gene.counts))
head(dat)
View(dat)
colData( parathyroidGenesSE)
ggplot(dat, aes(col = patient, x = treatment, y = ESR1)) +
geom_point(size = 3) +
facet_grid( . ~ time)
dat$CASR
dat$VDR
ggplot(dat) +
geom_point(aes(x=VDR, y=CASR, color=patient))+
facet_grid(.~time)
ggplot(dat) +
geom_point(aes(x=VDR, y=CASR, color=patient))+
geom_smooth(method = "lm")+
facet_grid(.~time)+
theme_bw()
ggplot(dat,aes(x=VDR, y=CASR, color=patient)) +
geom_point()+
geom_smooth(method = "lm")+
facet_grid(.~time)+
theme_bw()
ggplot(dat, aes( x = VDR, y = ORAI2)) +
geom_point(aes(fill = patient, shape = treatment, alpha=time), size = 3) +
scale_alpha_manual(values = c(1.0, 0.7)) +
scale_shape_manual(values = c(21, 22, 24)) +
guides(fill = guide_legend(override.aes=list(shape=21))) +
facet_grid( . ~ time)
ggplot(dat, aes( x = JUN, y = ORAI2)) +
geom_point(aes(fill = time, shape = patient, alpha=treatment), size = 3) +
scale_alpha_manual(values = c(1.0, 0.7, 0.5)) +
scale_shape_manual(values = c(21, 22, 23,24)) +
guides(fill = guide_legend(override.aes=list(shape=21)))
ggplot(dat, aes( y = CASR, x = ESR1 + ESR2)) +
geom_point(aes(fill = treatment, color=treatment, shape = patient, alpha=time), size = 3) +
geom_smooth(aes(color = treatment), method = "lm", se=FALSE)+
scale_alpha_manual(values = c(1.0, 0.6)) +
scale_shape_manual(values = c(21, 22, 23,24)) +
guides(fill = guide_legend(override.aes=list(shape=21)))
ggplot(dat, aes(col=patient, x=CASR, y=VDR)) +
geom_point(size=3)
/Users/cdonnat/Dropbox/biox-rbootcamp.github.io/assets/lectures/ggplot2_lectures
ggplot(dat, aes(col=patient, x=CASR, y=VDR)) +
geom_point(size=3)
ggplot(dat, aes(col=patient, x=CASR, y=VDR)) +
geom_point(size=3) + theme_bw()
ggplot(dat,aes(x=VDR, y=ORAI2, color=patient)) +
geom_point()+
facet_grid(.~time)+
theme_bw()
ggplot(dat,aes(x=VDR, y=ORAI2, color=patient)) +
geom_point()+
facet_grid(.~time)+
theme_bw()
ggplot(dat,aes(x=VDR, y=ORAI2, color=patient)) +
geom_point()+
theme_bw()
ggplot(dat,aes(x=JUN, y=ORAI2, color=patient)) +
geom_point()+
facet_grid(.~time)+
theme_bw()
ggplot(dat,aes(x=JUN, y=ORAI2, color=patient)) +
geom_point()+
theme_bw()
ggplot(dat, aes(x=CASR, y = ESR1+ ESR2))+
geom_point(aes(color=treatment), size=3) +
geom_smooth(aes(color=treatment), method = "lm")+
theme_bw()
ggplot(dat, aes(x=CASR, y = ESR1+ ESR2))+
geom_point(aes(color=treatment), size=3) +
geom_smooth(aes(color=treatment), method = "lm", se=FALSE)+
theme_bw()
ggplot(dat, aes(x=CASR, y = ESR1+ ESR2))+
geom_point(aes(color=treatment, shape=patient), size=3) +
geom_smooth(aes(color=treatment), method = "lm", se=FALSE)+
theme_bw()
df_shape <- data.frame(x=runif(10),y=runif(10), shapes=as.factor(1:10))
ggplot(df_shape, aes(x=x,y=y, shape=shapes)) + geom_point()
BiocManager::install("EnsDb.Hsapiens.v86")
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("~/Downloads/Jamesetal2015Experiment2.csv")
library(manipulate)
par(mfrow = c(1, 2))
manipulate(plot_anova(n, mu_a, mu_b, mu_c, sigma),
n = slider(2, 50, 20),
mu_a = slider(-10, 10, 0),
mu_b = slider(-10, 10, 0),
mu_c = slider(-10, 10, 0),
sigma = slider(0, 10, 1, step = 0.5))
set.seed(42)
sleep_means = c(6.5, 8.2)
sleep_sigma = 1.2
melatonin = data.frame(
sleep = rnorm(n = 20, mean = sleep_means, sd = sleep_sigma),
group = rep(c("control", "treatment"), 10)
)
library(broom)
plot_anova = function(n = 20, mu_a = 0, mu_b = 0, mu_c = 0, sigma = 1) {
response = rnorm(n * 3, mean = c(mu_a , mu_b, mu_c), sd = sigma)
group    = factor(rep(LETTERS[1:3], n))
xmin = min(c(mu_a , mu_b, mu_c)) - 3 * sigma
xmax = max(c(mu_a , mu_b, mu_c)) + 3 * sigma
plot(0, main = "Truth",
xlim = c(xmin, xmax), ylim = c(0, 0.40), type = "n",
xlab = "observations", ylab = "density")
curve(dnorm(x, mean = mu_a, sd = sigma),
from = mu_a - 3 * sigma, to = mu_a + 3 * sigma,
add = TRUE, lwd = 2, col = "dodgerblue", lty = 1)
curve(dnorm(x, mean = mu_b, sd = sigma),
from = mu_b - 3 * sigma, to = mu_b + 3 * sigma,
add = TRUE, lwd = 2, col = "darkorange", lty = 2)
curve(dnorm(x, mean = mu_c, sd = sigma),
from = mu_c - 3 * sigma, to = mu_c + 3 * sigma,
add = TRUE, lwd = 3, col = "black", lty = 3)
rug(response[group == "A"], col = "dodgerblue",
lwd = 1.5, ticksize = 0.1, quiet = TRUE, lty = 1)
rug(response[group == "B"], col = "darkorange",
lwd = 1.5, ticksize = 0.1, quiet = TRUE, lty = 2)
rug(response[group == "C"], col = "black",
lwd = 2, ticksize = 0.1, quiet = TRUE, lty = 3)
boxplot(response ~ group, xlab = "group", main = "Observed Data", medcol = "white", varwidth = FALSE)
stripchart(response ~ group, vertical = TRUE, method = "jitter", add = TRUE,
pch = 20, col  = c("dodgerblue", "darkorange", "black"))
abline(h = mean(response), lwd = 3, lty = 1, col = "darkgrey")
segments(x0 = 0.6, x1 = 1.4, y0 = mean(response[group == "A"]), y1 = mean(response[group == "A"]), lwd = 2, lty = 2, col = "dodgerblue")
segments(x0 = 1.6, x1 = 2.4, y0 = mean(response[group == "B"]), y1 = mean(response[group == "B"]), lwd = 2, lty = 2, col = "darkorange")
segments(x0 = 2.6, x1 = 3.4, y0 = mean(response[group == "C"]), y1 = mean(response[group == "C"]), lwd = 2, lty = 2, col = "black")
aov_results = aov(response ~ group)
f_stat = summary(aov_results)[[1]]$F[1]
p_val  = summary(aov_results)[[1]]$P[1]
list(f = f_stat, p = p_val)
summary(aov_results)
}
library(manipulate)
par(mfrow = c(1, 2))
manipulate(plot_anova(n, mu_a, mu_b, mu_c, sigma),
n = slider(2, 50, 20),
mu_a = slider(-10, 10, 0),
mu_b = slider(-10, 10, 0),
mu_c = slider(-10, 10, 0),
sigma = slider(0, 10, 1, step = 0.5))
set.seed(42)
par(mfrow = c(1, 2))
p1 = plot_anova(n = 20, mu_a = -5, mu_b = 0, mu_c = 5, sigma = 1)
p1
library(broom)
plot_anova = function(n = 20, mu_a = 0, mu_b = 0, mu_c = 0, sigma = 1) {
response = rnorm(n * 3, mean = c(mu_a , mu_b, mu_c), sd = sigma)
group    = factor(rep(LETTERS[1:3], n))
xmin = min(c(mu_a , mu_b, mu_c)) - 3 * sigma
xmax = max(c(mu_a , mu_b, mu_c)) + 3 * sigma
plot(0, main = "Truth",
xlim = c(xmin, xmax), ylim = c(0, 0.40), type = "n",
xlab = "observations", ylab = "density")
curve(dnorm(x, mean = mu_a, sd = sigma),
from = mu_a - 3 * sigma, to = mu_a + 3 * sigma,
add = TRUE, lwd = 2, col = "dodgerblue", lty = 1)
curve(dnorm(x, mean = mu_b, sd = sigma),
from = mu_b - 3 * sigma, to = mu_b + 3 * sigma,
add = TRUE, lwd = 2, col = "darkorange", lty = 2)
curve(dnorm(x, mean = mu_c, sd = sigma),
from = mu_c - 3 * sigma, to = mu_c + 3 * sigma,
add = TRUE, lwd = 3, col = "black", lty = 3)
rug(response[group == "A"], col = "dodgerblue",
lwd = 1.5, ticksize = 0.1, quiet = TRUE, lty = 1)
rug(response[group == "B"], col = "darkorange",
lwd = 1.5, ticksize = 0.1, quiet = TRUE, lty = 2)
rug(response[group == "C"], col = "black",
lwd = 2, ticksize = 0.1, quiet = TRUE, lty = 3)
boxplot(response ~ group, xlab = "group", main = "Observed Data", medcol = "white", varwidth = FALSE)
stripchart(response ~ group, vertical = TRUE, method = "jitter", add = TRUE,
pch = 20, col  = c("dodgerblue", "darkorange", "black"))
abline(h = mean(response), lwd = 3, lty = 1, col = "darkgrey")
segments(x0 = 0.6, x1 = 1.4, y0 = mean(response[group == "A"]), y1 = mean(response[group == "A"]), lwd = 2, lty = 2, col = "dodgerblue")
segments(x0 = 1.6, x1 = 2.4, y0 = mean(response[group == "B"]), y1 = mean(response[group == "B"]), lwd = 2, lty = 2, col = "darkorange")
segments(x0 = 2.6, x1 = 3.4, y0 = mean(response[group == "C"]), y1 = mean(response[group == "C"]), lwd = 2, lty = 2, col = "black")
aov_results = aov(response ~ group)
f_stat = summary(aov_results)[[1]]$F[1]
p_val  = summary(aov_results)[[1]]$P[1]
summary(aov_results)
return(list(f = f_stat, p = p_val)
)
}
library(manipulate)
par(mfrow = c(1, 2))
manipulate(plot_anova(n, mu_a, mu_b, mu_c, sigma),
n = slider(2, 50, 20),
mu_a = slider(-10, 10, 0),
mu_b = slider(-10, 10, 0),
mu_c = slider(-10, 10, 0),
sigma = slider(0, 10, 1, step = 0.5))
set.seed(42)
par(mfrow = c(1, 2))
p1 = plot_anova(n = 20, mu_a = -5, mu_b = 0, mu_c = 5, sigma = 1)
print(paste0("F= ", p1$f, " p-value= ", p1$p))
set.seed(1337)
par(mfrow = c(1, 2))
p2 = plot_anova(n = 20, mu_a =  0, mu_b = 0, mu_c = 0, sigma = 1)
print(paste0("F= ", p2$f, " p-value= ", p2$p))
library(manipulate)
par(mfrow = c(1, 2))
manipulate(plot_anova(n, mu_a, mu_b, mu_c, sigma),
n = slider(2, 50, 20),
mu_a = slider(-10, 10, 0),
mu_b = slider(-10, 10, 0),
mu_c = slider(-10, 10, 0),
sigma = slider(0, 10, 1, step = 0.5))
help(switch)
switch (object,
case = action
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stats)
library(reshape2)
library(comorbidity)
FOLDER_PLOTS = "~/Downloads/ECMO_plots/"
ICU_data = "~/Downloads/"
proc= read.csv("/Users/cdonnat/Downloads/ICU_tonna - Procedures.csv",
fill =TRUE)
diagnoses = read.csv("/Users/cdonnat/Downloads/ICU_tonna - Diagnoses.csv",
fill =TRUE)
input = read.csv("/Users/cdonnat/Downloads/ICU_tonna - ICU Location.csv",
fill =TRUE)
input$PrimaryDiagnosis = sapply(input$PrimaryDiagnosis, toString)
input$YearECLS = as.factor(input$YearECLS)   ### convert into a factor
input$ICULocation = sapply(input$ICULocation, FUN=function(x){toString(x)})
input$ICULocation[which(input$ICULocation == "Adult Cardiac ICU")] = "Adult Cardiovascular ICU"
input$ICULocation =  as.factor(input$ICULocation)
input = input %>%
filter((ICULocation!= "Neonatal ICU")&(ICULocation!= "Pediatric cardiac ICU")&(ICULocation!= "Pediatric ICU")&(ICULocation!= "Operating Room/Cath Lab")&(ICULocation!= "Emergency Department"), YearECLS != 2020)
proc= read.csv("/Users/cdonnat/Downloads/ICU_tonna - Procedures.csv",
fill =TRUE)
diagnoses = read.csv("/Users/cdonnat/Downloads/ICU_tonna - Diagnoses.csv",
fill =TRUE)
input = read.csv("/Users/cdonnat/Downloads/ICU_tonna - ICU Location.csv",
fill =TRUE)
input$PrimaryDiagnosis = sapply(input$PrimaryDiagnosis, toString)
input$YearECLS = as.factor(input$YearECLS)   ### convert into a factor
input$ICULocation = sapply(input$ICULocation, FUN=function(x){toString(x)})
input$ICULocation[which(input$ICULocation == "Adult Cardiac ICU")] = "Adult Cardiovascular ICU"
input$ICULocation =  as.factor(input$ICULocation)
input = input %>%
filter((ICULocation!= "Neonatal ICU")&(ICULocation!= "Pediatric cardiac ICU")&(ICULocation!= "Pediatric ICU")&(ICULocation!= "Operating Room/Cath Lab")&(ICULocation!= "Emergency Department") &(YearECLS != 2020))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stats)
library(reshape2)
library(comorbidity)
FOLDER_PLOTS = "~/Downloads/ECMO_plots/"
ICU_data = "~/Downloads/"
proc= read.csv("/Users/cdonnat/Downloads/ICU_tonna - Procedures.csv",
fill =TRUE)
diagnoses = read.csv("/Users/cdonnat/Downloads/ICU_tonna - Diagnoses.csv",
fill =TRUE)
input = read.csv("/Users/cdonnat/Downloads/ICU_tonna - ICU Location.csv",
fill =TRUE)
input$PrimaryDiagnosis = sapply(input$PrimaryDiagnosis, toString)
input$YearECLS = as.factor(input$YearECLS)   ### convert into a factor
input$ICULocation = sapply(input$ICULocation, FUN=function(x){toString(x)})
input$ICULocation[which(input$ICULocation == "Adult Cardiac ICU")] = "Adult Cardiovascular ICU"
input$ICULocation =  as.factor(input$ICULocation)
input = input %>%
filter((ICULocation!= "Neonatal ICU")&(ICULocation!= "Pediatric cardiac ICU")&(ICULocation!= "Pediatric ICU")&(ICULocation!= "Operating Room/Cath Lab")&(ICULocation!= "Emergency Department") &(YearECLS != 2020))
detach("package:Biostrings", unload=TRUE)
detach("package:BiocParallel", unload=TRUE)
detach("package:Biobase", unload=TRUE)
detach("package:BiocGenerics", unload=TRUE)
detach("package:ensembldb", unload=TRUE)
detach("package:EnsDb.Hsapiens.v86", unload=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stats)
library(reshape2)
library(comorbidity)
FOLDER_PLOTS = "~/Downloads/ECMO_plots/"
ICU_data = "~/Downloads/"
proc= read.csv("/Users/cdonnat/Downloads/ICU_tonna - Procedures.csv",
fill =TRUE)
diagnoses = read.csv("/Users/cdonnat/Downloads/ICU_tonna - Diagnoses.csv",
fill =TRUE)
input = read.csv("/Users/cdonnat/Downloads/ICU_tonna - ICU Location.csv",
fill =TRUE)
input$PrimaryDiagnosis = sapply(input$PrimaryDiagnosis, toString)
input$YearECLS = as.factor(input$YearECLS)   ### convert into a factor
input$ICULocation = sapply(input$ICULocation, FUN=function(x){toString(x)})
input$ICULocation[which(input$ICULocation == "Adult Cardiac ICU")] = "Adult Cardiovascular ICU"
input$ICULocation =  as.factor(input$ICULocation)
input = input %>%
filter((ICULocation!= "Neonatal ICU")&(ICULocation!= "Pediatric cardiac ICU")&(ICULocation!= "Pediatric ICU")&(ICULocation!= "Operating Room/Cath Lab")&(ICULocation!= "Emergency Department") &(YearECLS != 2020))
