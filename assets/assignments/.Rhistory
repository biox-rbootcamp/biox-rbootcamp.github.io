select(movies, starts_with("c"))
select(movies, starts_with("r"))
select(movies, ends_with("y"))
select(movies, ends_with("e"))
select(movies, contains("re"))
movies %>% select(-budget:score)
movies %>% select(-budget, -company)
colnames(movies)
# remove budget and company columns
movies %>% select(-budget, -company)
# Selecting and renaming in one
movies %>% select(name, gross_revenue = gross)
print(filter(movies, country %in% c("Poland", "Mexico", "Chile")), n = 30)
table(movies$country)
filter(movies, country %in% c("Poland", "Portugal", "Peru"))
filter(movies, country == "Poland" | country == "Mexico")
filter(movies, country == "Poland" | country == "Chile")
filter(movies, country == "Poland" | country == "Hungary")
filter(movies, country %in% c("Poland", "Portugal", "Peru"))
filter(movies, country == "Greece" | country == "Brazil")
filter(movies, country == "Greece" | country == "Chile")
filter(movies, country %in% c("Netherlands", "New Zealand", "Norway"))
filter(movies, country %in% c("Colombia", "Cuba", "Chile"))
filter(movies, country %in% c("Argentina", "Colombia", "Chile"))
print(filter(movies, country %in% c("Argentina", "Colombia", "Chile")), n = Inf)
# remove budget and company columns
select(movies, -budget, -company)
# Selecting and renaming in one
select(movies, name, gross_revenue = gross)
print(movies, n = 3)
# remove budget and company columns
print(select(movies, -budget, -company), n = 3)
# Selecting and renaming in one
print(select(movies, name, gross_revenue = gross), n = 3)
arrange(movies.sub, names)
# dplyr approach
movies.sub <- select(movies, name, year, genre)
movies.sub
arrange(movies.sub, name)
# dplyr approach
arrange(movies.sub, name)
# use `desc` for descending
arrange(movies.sub, desc(year))
mutate(movies, profit = gross - budget)
# dplyr approach
movies <- mutate(movies, profit = gross - budget)
select(movies, name, gross, budget, profit)
movies <- mutate(movies, profit = gross - budget,
profit_in_mil = profit/10^6,
profit_frac = profit/budget)
select(movies, name, gross, budget, contains("profit"))
movies <- mutate(movies, profit = gross - budget,
gross_in_mil = gross/10^6,
budget_in_mil = budget/10^6,
profit_in_mil = profit/10^6,
profit_frac = profit/budget)
select(movies, name, gross_in_mil, budget_in_mil, contains("profit"))
movies <- mutate(movies, profit = gross - budget,
gross_in_mil = gross/10^6,
budget_in_mil = budget/10^6,
profit_in_mil = profit/10^6,
profit_frac = profit/budget)
select(movies, name, contains("_in_mil"), contains("profit"))
movies <- mutate(movies, profit = gross - budget,
gross_in_mil = gross/10^6,
budget_in_mil = budget/10^6,
profit_in_mil = profit/10^6)
select(movies, name, contains("_in_mil"))
summarise(movies, total_gross_in_mil = sum(gross)/10^6)
summarise(movies, total_gross_in_bil = sum(gross)/10^9)
head(group_by(movies, genre))
group_by(movies, genre)
n(group_by(movies, genre))
summarize(by_genre, total = sum(gross)/10^8)
by_genre <- group_by(movies, genre)
summarize(by_genre, total = sum(gross)/10^8)
by_genre <- group_by(movies, genre)
print(summarize(by_genre, total = sum(gross)/10^8), n = 6)
install.packages("kableExtra")
cos(1)
cos(3*\pi)
log(42)
log(42, base 2)
log(42, base=2)
log(factorial(7), 2)
log(factorial(7), 2)/42
42/log(factorial(7), 2)
log(factorial(7), 2)*3.414854
42/log(factorial(7), 5)
\sqrt[3]{4^{1/2} + e^2}
(4^{1/2} + exp(2))^(-/3)
(4^{1/2} + exp(2))^(-1/3)
(4^{1/2} + exp(2))^(1/3)
42/(4^{1/2} + exp(2))^(1/3)
42/(3^5 + exp(2))^(1/3)
42/(3^4 + exp(2))^(1/3)
42/(2.5^2 + exp(2))^(1/3)
42/(2.5^2 + exp(6))^(1/3)
42/(2.5^2 + exp(7))^(1/3)
4*(2.5^2 + exp(7))^(1/3)
[1] 4.065115
4*(2.5^2 + exp(7))^(1/3)
(2.5^2 + exp(7))^(1/3)
(2^2 + exp(7))^(1/3)
(3^2 + exp(7))^(1/3)
42/(4^2 + exp(7))^(1/3)
42/(4^2 + exp(8))^(1/3)
42/(3.5^2 + exp(7))^(1/3)
42/(2.5^2 + exp(7))^(1/3)
42/(2^2 + exp(7))^(1/3)
42/(2.7^3 + exp(7))^(1/3)
42/(4^3 + exp(7))^(1/3)
42/(3^3 + exp(7))^(1/3)
42/(3^5 + exp(7))^(1/3)
42/(3^4 + exp(7))^(1/3)
42/(3.9^2 + exp(7))^(1/3)
42/(4^2 + exp(7))^(1/3)
42/(4.5^2 + exp(7))^(1/3)
42/(5^2 + exp(7))^(1/3)
42/(10^2 + exp(7))^(1/3)
42/(6^2 + exp(7))^(1/3)
42/(7^2 + exp(7))^(1/3)
42/((1/6)^2 + exp(7))^(1/3)
42/((1/6)^5 + exp(7))^(1/3)
44*(7^2 + exp(7))^(1/3)
4*(7^2 + exp(7))^(1/3)
4.01*(7^2 + exp(7))^(1/3)
4.02*(7^2 + exp(7))^(1/3)
4.019*(7^2 + exp(7))^(1/3)
4.02*(7^2 + exp(7))^(1/3)
log(factorial(13), 2)
42/log(factorial(13), 2)
1.4*log(factorial(13), 2)
1.3*log(factorial(13), 2)
1.4*log(factorial(12), 2)
1.3*log(factorial(12), 2)
1.5*log(factorial(12), 2)
1.4*log(factorial(12), 2)
1.45*log(factorial(12), 2)
1.46*log(factorial(12), 2)
42/pi
42/pi^2
42/2
sum(seq(1, 11))
7*8
7*8/2
9*10/2
sum(seq(2, 3))
sum(seq(2, 10))
sum(seq(1, 10))
sum(seq(1, 9))
sum(seq(3, 9))
pi*choose(5, 2)
choose(5, 2)
5*4/2
42/pi*choose(5, 2)
42/(pi*choose(5, 2))
4/3*(pi*choose(5, 2))
4/3*(pi*choose(6, 2))
4/3*(pi*choose(5, 2))
4.1/3*(pi*choose(5, 2))
4/2.9*(pi*choose(5, 2))
4/2*(pi*choose(5, 2))
4/3*(pi*choose(5, 2))
4.01/3*(pi*choose(5, 2))
4.02/3*(pi*choose(5, 2))
4.015/3*(pi*choose(5, 2))
4.017/3*(pi*choose(5, 2))
4.0/3*(pi*choose(5, 2))
4.005/3*(pi*choose(5, 2))
4.007/3*(pi*choose(5, 2))
4.009/3*(pi*choose(5, 2))
4.019/3*(pi*choose(5, 2))
4.011/3*(pi*choose(5, 2))
4.01/3*(pi*choose(5, 2))
4.011/3*(pi*choose(5, 2))
setwd("~/MEGA/Teaching/cme195_intro_to_R/cme195.github.io/assets/homework/")
rmarkdown::render("Homework 1.Rmd", "all")
list.files()
rmarkdown::render("homework1.Rmd", "all")
getwd()
rmarkdown::render("homework1.Rmd", "all")
rmarkdown::render("homework1.rmd", "all")
rmarkdown::render("homework1.rmd", "all")
knitr::opts_chunk$set(echo = TRUE)
sleep
knitr::opts_chunk$set(echo = TRUE)
rm(lits = ls())
rm(list = ls())
sleep
sleep$ID <- factor(sleep$ID, levels = 10:1, labels = LETTERS[1:10])
sleep
packageVersion("prettydoc")
is.integer(2.00)
is.integer(integer(2.00))
is.integer(integer(2.50))
integer(2.5)
as.integer(2.5)
# function returns whether the input argument is a prime number
is_prime <- function(n) {
if (n <= 1) return(FALSE)
if (n <= 3) return(TRUE)
# Now we check if n is NOT of the form  6k + 1 or 6k -1
if (n %% 6 != 1   && n %% 6 != 5) return(FALSE)
return(!any(n %% 2:sqrt(n) == 0))
}
# function returns all primes less than or equal to n
primes_up_to <- function(n){
idx_prime <- sapply(1:n, is_prime)
return(seq(1, n)[idx_prime])
}
sum(primes_up_to(10000))
# function returns first k primes
n_primes <- function(k){
if (k != floor(k) | k <= 0){
stop("k must be a positive integer")
}
primes <- c(2, 3)
cur_number <- 4
while (length(primes) < k) {
while(!is_prime(iprime)) {
cur_number <- cur_number + 1
}
primes <- c(primes, cur_number)
cur_number <- cur_number + 1
}
return(primes)
}
sum(n_primes(1000))
# function returns first k primes
n_primes <- function(k){
if (k != floor(k) | k <= 0){
stop("k must be a positive integer")
}
primes <- c(2, 3)
cur_number <- 4
while (length(primes) < k) {
while(!is_prime(cur_number)) {
cur_number <- cur_number + 1
}
primes <- c(primes, cur_number)
cur_number <- cur_number + 1
}
return(primes)
}
sum(n_primes(1000))
head(n_primes(1000), 20)
i1 <- 1; i2 <- 2
tot <- 3
nums <- c(2)
while(i2 < 10^6) {
i0 <- i1; i1 <- i2
i2 <- i0 + i2
if (i2 %% 2 == 0) {
nums <- c(nums, i2)
tot <- tot + i2
}
}
tot
i1 <- 1; i2 <- 2
tot <- 3
nums <- c(2)
while(i2 < 4*10^6) {
i0 <- i1; i1 <- i2
i2 <- i0 + i2
if (i2 %% 2 == 0) {
nums <- c(nums, i2)
tot <- tot + i2
}
}
tot
i1 <- 1; i2 <- 2
sum_even_fib <- 2
nums <- c(2)
while(i2 < 4*10^6) {
i0 <- i1; i1 <- i2
i2 <- i0 + i2
if (i2 %% 2 == 0) {
nums <- c(nums, i2)
sum_even_fib <- sum_even_fib + i2
}
}
sum_even_fib
i1 <- 1; i2 <- 2
sum_even_fib <- 2
nums <- c(2)
while(i2 < 10^6) {
i0 <- i1; i1 <- i2
i2 <- i0 + i2
if (i2 %% 2 == 0) {
nums <- c(nums, i2)
sum_even_fib <- sum_even_fib + i2
}
}
sum_even_fib
f <- function(theta) {
res <- 7 - 0.5 * sin(theta) + 2.5 * sin(3 * theta) +
2 * sin(5 * theta) - 1.7 * sin(7 * theta) +
3 * cos(2 * theta) - 2 * cos(4 * theta) -
0.4 * cos(16 * theta)
return(res)
}
theta <- seq(0, 2 * pi, by = 0.01)
x <- sapply(theta, function(x) f(x)*cos(x))
y <- sapply(theta, function(x) f(x)*sin(x))
plot(x, y)
as.Date("10/01/2011")
as.Date("10/01/2011", format = "%d/%m/%Y") - as.Date("13/03/2007", format = "%d/%m/%Y")
month(as.Date("10/01/2011", format = "%d/%m/%Y") - as.Date("13/03/2007", format = "%d/%m/%Y"))
z <- (as.Date("10/01/2011", format = "%d/%m/%Y") - as.Date("13/03/2007", format = "%d/%m/%Y"))
class(z)
z/30
as.numeric(z)
is.numeric.Date(z)
is.numeric.Date(as.Date("10/01/2011", format = "%d/%m/%Y"))
class(as.Date("10/01/2011", format = "%d/%m/%Y"))
time_diff(as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
Sys.Date(), "days")
time_diff <- function(date1, date2, units = "days") {
if (!all(class(date1) == "Date", class(date2) == "Date"))
stop('date1 and date2 must be of class "Date"')
if (!units %in% c("hours", "days", "months", "years"))
stop('"units" must be "hours", "days", "months", or "years"')
diff <- as.numeric(date2 - date1)
if (units == "hours") diff <- 24 * diff
if (units == "months") diff <- ceiling(diff/31)
if (units == "years") diff <- ceiling(diff/365)
return(diff)
}
time_diff(as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
Sys.Date(), "days")
time_diff(Sys.Date(),
as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
"days")
time_diff(Sys.Date(),
as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
"months")
time_diff(Sys.Date(),
as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
"days")
time_diff(Sys.Date(),
as.Date(as.Date("14/06/2018", format = "%d/%m/%Y")),
"hours")
z <- read.csv("../data/share-of-people-who-say-they-are-happy.csv")
head(z)
write.table(z, file = "../data/share-of-people-who-say-they-are-happy.txt", quote = FALSE, sep = ";")
head(z)
y <- z[z$Year == "2014", ]
y[order(-y$Share.of.people.who.are.happy..World.Value.Survey.2014.....), ]
z <- read.csv("../data/share-of-people-who-say-they-are-happy.csv")
head(z)
colnames(z)[4] <- "ShareOfHappyPeople"
head(z)
write.table(z, file = "../data/share-of-people-who-say-they-are-happy.txt", quote = FALSE, sep = ";")
?read.table
happiness <- read.table(url, sep = ";", header = TRUE, row.names = 1)
happiness <- read.table(file = url, sep = ";", header = TRUE, row.names = 1)
url <- "../data/share-of-people-who-say-they-are-happy.txt"
happiness <- read.table(file = url, sep = ";", header = TRUE, row.names = 1)
head(happiness)
happiness[which.max(happiness[happiness$Year == "2014", "ShareOfHappyPeople"]), ]
happiness2000 <- happiness[happiness$Year > 2000, ]
write.table(happiness2000, file = "~/Downloads/happiness200.txt", quote = FALSE, sep = "\t")
install.packages("nycflights13")
library(nycflights13)
?filghts
?flights
head(flights)
flights
flights
table(flights$carrier)
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
flights
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
flights
table(flights$year)
flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(dest, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay),
avg_arr_delay = mean(arr_delay),
) %>%
top_n(n = 1, wt = avg_arr_delay)
flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(dest, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay),
avg_arr_delay = mean(arr_delay)
) %>%
top_n(n = 1, wt = desc(avg_arr_delay))
flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(origin, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay),
avg_arr_delay = mean(arr_delay)
) %>%
top_n(n = 1, wt = desc(avg_dep_delay))
table(flights$origin)
z <- flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(origin, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay),
avg_arr_delay = mean(arr_delay)
)
table(z$origin)
z
z <- flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(origin, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)
z
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
flights
z <- flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(origin, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
top_n(n = 1, wt = desc(avg_dep_delay))
flights %>%
select(carrier, origin, dest, dep_delay, arr_delay) %>%
group_by(origin, carrier) %>%
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
top_n(n = 1, wt = desc(avg_dep_delay))
airport
airports
?airports
?airports
?airports
?airports
airlines
?weather
weather
filghts %>% left_join(airlines)
flights %>% left_join(airlines)
flights %>%
select(month, day, dep_time, arr_time, carrier, flight,
tailnum, origin, dest, distance) %>%
left_join(airlines)
flights %>%
select(month, day, dep_time, arr_time, carrier, flight,
tailnum, origin, dest, distance) %>%
left_join(airlines)
flights %>%
select(month, day, dep_time, arr_time, carrier,
flight, tailnum, origin, dest) %>%
left_join(airlines)
weather
airports
flights2 <- flights  %>%
select(month, day, dep_time, arr_time, carrier,
flight, tailnum, origin, dest)
flights2 %>%  left_join(airlines)
weather
flights
planes
flights2 <- flights  %>%
select(month, day, dep_time, arr_time, carrier,
flight, tailnum, origin, dest) %>%
left_join(airlines)
flights2
flights%>% left_join(weather)
flights2 %>% left_join(weather)
flights2 <- flights  %>%
select(month, day, time_hour, dep_time, arr_time, carrier,
flight, tailnum, origin, dest) %>%
left_join(airlines)
flights2
flights2 %>% left_join(weather)
flights %>% left_join(planes)
flights2 %>% left_join(airlines)
flights2 <- flights  %>%
select(month, day, time_hour, dep_time, arr_time, carrier,
flight, tailnum, origin, dest)
flights2 <- flights  %>%
select(month, day, time_hour, dep_time, arr_time, carrier,
flight, tailnum, origin, dest)
flights2
flights2 <- flights  %>%
select(month, day, time_hour, dep_time, arr_time, carrier,
flight, tailnum, origin, dest)
flights2
flights2 %>% left_join(airlines)
flights %>% left_join(planes)
planes
airports
flights
planes
flights %>% left_join(planes, by = "tailnum")
flights2 %>% left_join(planes, by = "tailnum")
flights2 %>% left_join(planes, by = c("origin" = "faa")
)
rm(list = ls())
