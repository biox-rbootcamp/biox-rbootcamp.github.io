qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks %>% spread(year, return)
stocks %>% spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks %>% complete(year, qtr)
# tribble() constructs a tibble by filling by rows
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment %>% fill(person)
library(nycflights13)
planes %>%
count(tailnum) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
flights %>%
count(flight) %>%
filter(n > 1)
flights %>%
mutate(flight_id= paste0("F", row_number())) %>%
select(flight_id, year:flight)
flights %>%
select(year:day, hour, origin, dest, tailnum, carrier) %>%
left_join(airlines, by = "carrier")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
x %>% inner_join(y, by = "key")
df1 <- tribble(
~x, ~y,
1,  1,
2,  1
)
df2 <- tribble(
~x, ~y,
1,  1,
1,  2
)
intersect(df1, df2)
union(df1, df2)
setdiff(df1, df2)
setdiff(df2, df1)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
diamonds %>% filter(carat < 3) %>%
ggplot(aes(x = carat)) + geom_histogram(binwidth = 0.01)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
diamonds %>% filter(y < 3 | y > 20) %>%
select(price, carat, x, y, z) %>% arrange(y)
ggplot(data = diamonds) +
geom_point(aes(x=carat, y=price), alpha=0.1)
ggplot(mpg, aes(
x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_boxplot() + coord_flip()
ggplot(mpg, aes(
x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_violin() + coord_flip()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n)) +
scale_fill_viridis()
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_y_log10() + scale_x_log10()
# install.packages("hexbin")
ggplot(data = diamonds) +
geom_hex(mapping = aes(x = carat, y = price)) +
scale_y_log10() + scale_x_log10()
library(plotly); library(tidyverse) # or library(ggplot2); library(dplyr)
plt <- ggplot(diamonds %>% sample_n(1000), aes(x = carat, y = price)) +
geom_point(aes(color = cut))
ggplotly(plt)
plt <- ggplot(diamonds %>% sample_n(1000), aes(x = carat, y = price)) +
geom_text(aes(label = clarity), size = 4) +
geom_smooth(aes(color = cut, fill = cut)) +
facet_wrap(~cut)
ggplotly(plt)
theta <- seq(0, 10, 0.2);
df <- data.frame(U = theta, V =  cos(theta), W = sin(theta)*theta)
plot_ly(df, x = ~V, y = ~W, z = ~U, type = "scatter3d", mode = "markers",
marker = list(size = 3))
df$cols <- rep_len(c("orange", "blue", "green"), length.out = length(theta))
(plt <- plot_ly(df, x = ~V, y = ~W, z = ~U, color = ~cols,
type = "scatter3d", mode = "markers+lines",
marker = list(size = 5), line = list(width = 5)))
dbl.helix <- data.frame(t = rep(seq(0, 2*pi, length.out = 100), 3)) %>%
mutate(x1 = sin(t), y1 = cos(t), z = (1:length(t))/10,
x2 = sin(t + pi/2), y2 = cos(t + pi/2))
plot_ly(dbl.helix, x = ~x1, y = ~y1, z = ~z, type = "scatter3d", mode = "lines",
color = "green", colors = c("green", "purple"), line = list(width = 5)) %>%
add_trace(x = ~x2, y = ~y2, z = ~z+0.2, color = "purple")
dim(volcano)
volcano[1:5, 1:5]
plot_ly(z = volcano) %>% add_contour()
plot_ly(z = volcano) %>% add_surface()
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
head(dat)
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
head(dat)
#1. Create a scatter plot with percent of people over the age of 15 with a bank
p <- ggplot(
dat, aes(x = Percent.of.15plus.with.bank.account, y = SEDA.Current.level))
p + geom_point()
#2. Color the points in the previous plot blue.
p + geom_point(color = "blue")
#3. Color the points in the previous plot according to the `Region`.
(p3 <- p + geom_point(aes(color = Region)))
# 4. Overlay a smoothing line on top of the scatter plot using the default method.
p3 + geom_smooth()
#4. Changing the span parameter
p3 + geom_smooth(span = 0.2)
#5. Overlay a smoothing line on top of the scatter plot using the lm method
(p5 <- p3 + geom_smooth(method = "lm"))
# 6. Facetting plots
p5 + facet_wrap(~ Region)
ggplot(dat, aes(x = Region)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
dat <- dat %>%
mutate(reg = reorder(Region, Region, function(x) -length(x)))
barplot <- ggplot(dat, aes(x = reg)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
barplot
barplot + coord_flip()
plt <- ggplot(dat, aes(x = Region, y = SEDA.Current.level)) +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
plt + geom_boxplot()
plt + geom_boxplot() + geom_point()
plt + geom_boxplot() + geom_jitter(width = 0.1)
plt + geom_violin() + geom_jitter(width = 0.1)
regions <- c("Europe", "Asia", "Oceania", "North America",
"Latin America & the Caribbean", "Middle East & North Africa",
"Sub-Saharan Africa")
# Here we are just modifying labels so that some names are on two lines
region_labels <-  c("Europe", "Asia", "Oceania", "North America",
"Latin America & \n the Caribbean",
"Middle East & \n North Africa", "Sub-Saharan \n Africa")
dat <- dat %>%
mutate(
Region = as.character(Region),
Region = factor(Region, levels = regions, labels = region_labels)
)
custom_colors <- c("#28AADC","#F2583F", "#76C0C1","#24576D", "#248E84",
"#DCC3AA","#96503F")
p <- ggplot(
dat, aes(Percent.of.15plus.with.bank.account, SEDA.Current.level)) +
geom_point(aes(fill = Region), color = "white", size = 4, pch = 21) +
geom_smooth(method = "lm", se = FALSE, col = "black", size = 0.5) +
scale_fill_manual(name = "", values = custom_colors) +
coord_fixed(ratio = 0.4) +
scale_x_continuous(name = "% of people aged 15+ with bank account, 2014",
limits = c(0, 100),
breaks = seq(0, 100, by = 20)) +
scale_y_continuous(name = "SEDA Score, 100=maximum",
limits = c(0, 100),
breaks = seq(0, 100, by = 20)) +
labs(title="Laughing all the way to the bank",
subtitle="Well-being and financial inclusion* \n 2014-15")
p
#install.packages("ggthemes")
library(ggthemes)
(p <- p + theme_economist_white(gray_bg = FALSE))
p + theme(
text = element_text(color = "grey35", size = 11),
legend.text = element_text(size = 10),
legend.position = c(0.72, 1.12),
legend.direction = "horizontal") +
guides(fill = guide_legend(ncol = 4, byrow = FALSE))
# Choose a subset of countries
pointsToLabel <- c(
"Yemen", "Iraq", "Egypt", "Jordan", "Chad", "Congo", "Angola", "Albania",
"Zimbabwe", "Uganda", "Nigeria", "Uruguay", "Kazakhstan", "India", "Turkey",
"South Africa", "Kenya", "Russia", "Brazil", "Chile", "Saudi Arabia",
"Poland", "China", "Serbia", "United States", "United Kingdom")
# install.packages("ggrepel")
library(ggrepel)
(p <- p +
geom_text_repel(
aes(label = Country), color = "grey20",
data = dat %>% filter(Country %in% pointsToLabel),
force = 15))
p + theme(
text = element_text(color = "grey35", size = 11),
legend.text = element_text(size = 10),
legend.position = c(0.72, 1.12),
legend.direction = "horizontal") +
guides(fill = guide_legend(ncol = 4, byrow = FALSE))
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
head(dat)
#1. Create a scatter plot with percent of people over the age of 15 with a bank
p <- ggplot(
dat, aes(x = Percent.of.15plus.with.bank.account, y = SEDA.Current.level))
p + geom_point()
#2. Color the points in the previous plot blue.
p + geom_point(color = "blue")
#3. Color the points in the previous plot according to the `Region`.
(p3 <- p + geom_point(aes(color = Region)))
# 4. Overlay a smoothing line on top of the scatter plot using the default method.
p3 + geom_smooth()
#4. Changing the span parameter
p3 + geom_smooth(span = 0.2)
#5. Overlay a smoothing line on top of the scatter plot using the lm method
(p5 <- p3 + geom_smooth(method = "lm"))
# 6. Facetting plots
p5 + facet_wrap(~ Region)
ggplot(dat, aes(x = Region)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
dat <- dat %>%
mutate(reg = reorder(Region, Region, function(x) -length(x)))
barplot <- ggplot(dat, aes(x = reg)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
barplot
barplot + coord_flip()
plt <- ggplot(dat, aes(x = Region, y = SEDA.Current.level)) +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
plt + geom_boxplot()
plt + geom_boxplot() + geom_point()
plt + geom_boxplot() + geom_jitter(width = 0.1)
plt + geom_violin() + geom_jitter(width = 0.1)
regions <- c("Europe", "Asia", "Oceania", "North America",
"Latin America & the Caribbean", "Middle East & North Africa",
"Sub-Saharan Africa")
# Here we are just modifying labels so that some names are on two lines
region_labels <-  c("Europe", "Asia", "Oceania", "North America",
"Latin America & \n the Caribbean",
"Middle East & \n North Africa", "Sub-Saharan \n Africa")
dat <- dat %>%
mutate(
Region = as.character(Region),
Region = factor(Region, levels = regions, labels = region_labels)
)
custom_colors <- c("#28AADC","#F2583F", "#76C0C1","#24576D", "#248E84",
"#DCC3AA","#96503F")
p <- ggplot(
dat, aes(Percent.of.15plus.with.bank.account, SEDA.Current.level)) +
geom_point(aes(fill = Region), color = "white", size = 4, pch = 21) +
geom_smooth(method = "lm", se = FALSE, col = "black", size = 0.5) +
scale_fill_manual(name = "", values = custom_colors) +
coord_fixed(ratio = 0.4) +
scale_x_continuous(name = "% of people aged 15+ with bank account, 2014",
limits = c(0, 100),
breaks = seq(0, 100, by = 20)) +
scale_y_continuous(name = "SEDA Score, 100=maximum",
limits = c(0, 100),
breaks = seq(0, 100, by = 20)) +
labs(title="Laughing all the way to the bank",
subtitle="Well-being and financial inclusion* \n 2014-15")
p
#install.packages("ggthemes")
library(ggthemes)
(p <- p + theme_economist_white(gray_bg = FALSE))
p + theme(
text = element_text(color = "grey35", size = 11),
legend.text = element_text(size = 10),
legend.position = c(0.72, 1.12),
legend.direction = "horizontal") +
guides(fill = guide_legend(ncol = 4, byrow = FALSE))
# Choose a subset of countries
pointsToLabel <- c(
"Yemen", "Iraq", "Egypt", "Jordan", "Chad", "Congo", "Angola", "Albania",
"Zimbabwe", "Uganda", "Nigeria", "Uruguay", "Kazakhstan", "India", "Turkey",
"South Africa", "Kenya", "Russia", "Brazil", "Chile", "Saudi Arabia",
"Poland", "China", "Serbia", "United States", "United Kingdom")
# install.packages("ggrepel")
library(ggrepel)
(p <- p +
geom_text_repel(
aes(label = Country), color = "grey20",
data = dat %>% filter(Country %in% pointsToLabel),
force = 15))
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
head(dat)
dat
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
dat
kable(dat)
knitr::kable(dat)
knitr::kable(dat)
library(tidyverse)
url <- paste0("https://raw.githubusercontent.com/cme195/cme195.github.io/",
"master/assets/data/EconomistData.csv")
dat <- read_csv(url)
dat
dat
data.frame(dat)
head(dat)
library(tidyverse)
zillow_url1 <- paste0("http://files.zillowstatic.com/research/public/City/",
"City_MedianRentalPricePerSqft_AllHomes.csv")
zillow_url2 <- paste0("http://files.zillowstatic.com/research/public/City/",
"City_ZriPerSqft_AllHomes.csv")
price_per_sqft <- read_csv(zillow_url1)
value_per_sqft <- read_csv(zillow_url2)
# First, we tidy the datasets:
price_per_sqft <- price_per_sqft %>%
select(-Metro) %>%
gather(`2010-01`:`2018-08`, key = "date", value = "price")
value_per_sqft <- value_per_sqft %>%
select(RegionID:CountyName, `2011-01`:`2018-08`) %>%
gather(`2011-01`:`2018-08`, key = "date", value = "value")
# Do the inner join:
home_per_sqft <- price_per_sqft %>%
inner_join(value_per_sqft)
# Format dates:
home_per_sqft <- home_per_sqft %>%
mutate(date = paste0(date, "-01"),
date = as.Date(date))
# We filter to only top 10 priciest states this year
# excluding DC and HI:
top10_States <- home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
filter(State != "HI", State != "DC") %>%
group_by(State) %>%
summarise(price = mean(price, na.rm = TRUE)) %>%
top_n(10)
home_per_sqft <- home_per_sqft %>%
filter(State %in% top10_States$State)
#rm(price_per_sqft, value_per_sqft)
top10_States
bayarea_counties <- c("Alameda", "Napa", "Santa Clara", "Contra Costa",
"San Francisco", "Solano", "Marin", "San Mateo",
"Sonoma")
bay_area_home <- home_per_sqft %>%
filter(CountyName %in% bayarea_counties)
cities <- c("Oakland", "San Francisco", "Berkeley", "San Jose",
"San Mateo", "Redwood City", "Mountain View", "Napa",
"South San Francisco", "Menlo Park", "Cupertino")
library(plotly)
theta <- 2 * pi * runif(1000)
phi <- pi * runif(1000)
x <- sin(phi) * cos(theta)
y <- sin(phi) * sin(theta)
z <- cos(phi)
dat <- data.frame(x, y, z)
N <- 10
theta <- rep(2*pi * seq(0, 1, length.out = 100), N)
phi <- rep(pi * seq(0, 1, length.out = N*100))
x <- sin(phi) * cos(theta)
y <- sin(phi) * sin(theta)
z <- cos(phi)
dat <- data.frame(x, y, z)
library(tidyverse)
map_dbl(mtcars, mean)
map(c(-18, 5, 10, 30), rnorm, n = 10)
map(1:5, rnorm)
map(list(1:5), rnorm)
map(list(1, 2, 3, 4, 5), rnorm)
map(1:5, rnorm, n = 7)
map2(c(2, -3, 20, -17), c(1, 10, 0.1, 2), rnorm, n = 5)
Lahman::Batting %>%
count(playerID, yearID, teamID, lgID, stint) %>%
filter(n > 1)
nasaweather::atmos %>%
count(lat, long, year, month) %>%
filter(n > 1)
ggplot2::diamonds %>%
count(carat, cut, color, clarity, depth, table, price, x, y, z)  %>%
filter(n > 1)
library(nycflights13)
flights2 <- flights %>%
left_join(airports, by = c("dest" = "faa"))
mean_delay <- flights2 %>%
group_by(lat, lon, origin) %>%
summarise(mean_dep_delay = mean(arr_delay, na.rm = TRUE))
(plt <- ggplot(mean_delay, aes(lon, lat)) +
borders("state") +
geom_point(aes(color = mean_dep_delay), size = 3) +
coord_quickmap() + theme_bw() +
scale_color_viridis_c())
ls()
rm(mean_delay, flights2, plt)
ls()
mean_delay <- readRDS("~/Desktop/mean_delay.rds")
mean_delay
load("~/Desktop/two_objects.rda")
ls()
zillow_url1 <- paste0("http://files.zillowstatic.com/research/public/City/",
"City_MedianRentalPricePerSqft_AllHomes.csv")
zillow_url2 <- paste0("http://files.zillowstatic.com/research/public/City/",
"City_ZriPerSqft_AllHomes.csv")
price_per_sqft <- read_csv(zillow_url1)
value_per_sqft <- read_csv(zillow_url2)
# First, we tidy the datasets:
price_per_sqft <- price_per_sqft %>%
select(-Metro) %>%
gather(`2010-01`:`2018-08`, key = "date", value = "price")
value_per_sqft <- value_per_sqft %>%
select(RegionID:CountyName, `2011-01`:`2018-08`) %>%
gather(`2011-01`:`2018-08`, key = "date", value = "value")
# Do the inner join:
home_per_sqft <- price_per_sqft %>%
inner_join(value_per_sqft)
# Format dates:
home_per_sqft <- home_per_sqft %>%
mutate(date = paste0(date, "-01"),
date = as.Date(date))
# We filter to only top 10 priciest states this year
# excluding DC and HI:
top10_States <- home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
filter(State != "HI", State != "DC") %>%
group_by(State) %>%
summarise(price = mean(price, na.rm = TRUE)) %>%
top_n(10)
home_per_sqft <- home_per_sqft %>%
filter(State %in% top10_States$State)
#rm(price_per_sqft, value_per_sqft)
top10_States
home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
ggplot(aes(x = value, y = price)) +
geom_point(aes(color = State), alpha = 0.3) +
theme(legend.position = "bottom") +
geom_smooth()
home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
filter(price > 5, value > 4)
home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
filter(price > 3, value < 2)
home_per_sqft %>%
filter(date >= as.Date("2018-01-01")) %>%
filter(price < 2.2, value > 2.8)
df <- home_per_sqft %>%
group_by(State, date) %>%
summarise(
price = mean(price, na.rm = TRUE),
value = mean(value, na.rm = TRUE))
ggplot(data = df, aes(x = date, y = price, color = State)) +
geom_line(lwd = 0.7)
bayarea_counties <- c("Alameda", "Napa", "Santa Clara", "Contra Costa",
"San Francisco", "Solano", "Marin", "San Mateo",
"Sonoma")
bay_area_home <- home_per_sqft %>%
filter(CountyName %in% bayarea_counties)
cities <- c("Oakland", "San Francisco", "Berkeley", "San Jose",
"San Mateo", "Redwood City", "Mountain View", "Napa",
"South San Francisco", "Menlo Park", "Cupertino")
df <- bay_area_home %>%
filter(date >= as.Date("2013-09-01")) %>%
filter(RegionName %in% cities)
ggplot(df, aes(x = RegionName, y = price)) +
geom_boxplot(aes(color = CountyName)) +
coord_flip()
ggplot(df) +
geom_line(aes(date, price, color = RegionName))
library(plotly)
theta <- 2 * pi * runif(1000)
phi <- pi * runif(1000)
x <- sin(phi) * cos(theta)
y <- sin(phi) * sin(theta)
z <- cos(phi)
dat <- data.frame(x, y, z)
plot_ly(dat, x = ~x, y = ~y, z = ~z,
type = "scatter3d", mode = "markers", marker = list(size = 3))
N <- 10
theta <- rep(2*pi * seq(0, 1, length.out = 100), N)
phi <- rep(pi * seq(0, 1, length.out = N*100))
x <- sin(phi) * cos(theta)
y <- sin(phi) * sin(theta)
z <- cos(phi)
dat <- data.frame(x, y, z)
plot_ly(dat, x = ~x, y = ~y, z = ~z, color = 1:1000) %>%
add_markers(marker = list(size = 2))
plot_ly(dat, x = ~x, y = ~y, z = ~z, color = 1:1000, type = "scatter3d",
mode = "lines", line = list(width = 3))
plot_ly(dat, x = ~x, y = ~y, z = ~z, color = 1:1000) %>%
add_markers(marker = list(size = 2))
